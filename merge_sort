Given an array arr[], its starting position l and its ending position r. Sort the array using the merge sort algorithm.

class Solution {
    void mergeSort(int arr[], int l, int r) {
        // Base condition for recursion
        if (l < r) {
            int mid = l + (r - l) / 2; // Calculate the midpoint

            // Recursively sort the first and second halves
            mergeSort(arr, l, mid);
            mergeSort(arr, mid + 1, r);

            // Merge the sorted halves
            mergeProcedure(arr, l, mid, r);
        }
    }

    void mergeProcedure(int[] arr, int l, int mid, int r) {
        // Sizes of the two subarrays
        int n1 = mid - l + 1;
        int n2 = r - mid;

        // Create temporary arrays for left and right subarrays
        int[] left = new int[n1];
        int[] right = new int[n2];

        // Copy data to temporary arrays
        for (int i = 0; i < n1; i++) {
            left[i] = arr[l + i];
        }
        for (int j = 0; j < n2; j++) {
            right[j] = arr[mid + 1 + j];
        }

        // Merge the temporary arrays back into the original array
        int i = 0, j = 0, k = l;
        while (i < n1 && j < n2) {
            if (left[i] <= right[j]) {
                arr[k] = left[i];
                i++;
            } else {
                arr[k] = right[j];
                j++;
            }
            k++;
        }

        // Copy remaining elements of left[] if any
        while (i < n1) {
            arr[k] = left[i];
            i++;
            k++;
        }

        // Copy remaining elements of right[] if any
        while (j < n2) {
            arr[k] = right[j];
            j++;
            k++;
        }
    }
}
